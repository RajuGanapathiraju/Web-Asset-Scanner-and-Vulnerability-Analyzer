const express = require('express');
const bodyParser = require('body-parser');
const jwt = require('jsonwebtoken');
const { MongoClient } = require('mongodb');

const app = express();
app.use(bodyParser.json());
app.use('/static', express.static('public'))


// MongoDB connection URL
require('dotenv').config();

const url = process.env.MONGODB_URI;
const client = new MongoClient(url);

const dbName = 'automation';


client.connect().then(() => {
    console.log('Connected to MongoDB server');
});

// Secret key for JWT
const secretKey = process.env.Secret_Key;

app.get('/', (req, res) => {
    // Serve your index.html file
    res.sendFile('/Users/rgy/Documents/scripts/Internal-DAST-TOOL/public/index.html');
});

// Login endpoint
app.post('/login', async (req, res) => {
    const { username, password } = req.body;
    try {
        const db = client.db(dbName);
        const collection = db.collection('users');
        // Find user in MongoDB
        const user = await collection.findOne({ username, password });
        if (user) {
            // Create JWT token
            const token = jwt.sign({ id: user._id, role: user.role }, secretKey, { expiresIn: '1h' });
            // Set JWT token as a cookie
            res.cookie('token', token, { httpOnly: true });
            res.json({ success: true, token });
        } else {
            res.json({ success: false });
        }
    } catch (error) {
        console.error('Error during login:', error);
        res.status(500).json({ success: false, error: 'Internal server error' });
    }
});

// Example protected route
app.get('/dashboard', verifyToken, (req, res) => {
    jwt.verify(req.token, secretKey, (err, authData) => {
        if (err) {
            res.sendStatus(403);
        } else {

        	if(authData.role == "admin"){
        		// Serve your dashboard.html file
            res.sendFile('/Users/rgy/Documents/scripts/Internal-DAST-TOOL/public/dashboard.html');
        	}
        	else{
        		res.json({ success: false, reason: "not an admin to access dashboard" });
        	}
            
        }
    });
});

// Middleware to verify JWT token
function verifyToken(req, res, next) {
    // Get token from cookies
    const cookieToken = req.headers.cookie;

    // Check if token exists
    if (cookieToken) {
        // Extract the token value from the cookie string
        const token = cookieToken.split('=')[1];

        // Set the token in the request object
        req.token = token;

        // Continue to the next middleware
        next();
    } else {
        // If token is not present, return forbidden status
        res.sendStatus(403);
    }
}

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});
