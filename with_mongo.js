const {
    MongoClient
} = require('mongodb');
const {
    execSync
} = require('child_process');
const exec = require('child_process').exec;
const readline = require('readline');
const request = require('request');
let async = require('async');
var colors = require('colors');

// @accepts no authentication for mongodb
const url = 'mongodb://localhost:27017';
const client = new MongoClient(url);

client.connect().then(() => {
    start()
});
console.log('Connected successfully to server\n');

const dbName = 'automation';
const db = client.db(dbName);



function start() {

    const r1 = readline.createInterface({
        input: process.stdin,
        output: process.stdout
    });

    // @accepts takes user inputs into the command and run the command
    r1.question("Enter the domain name:\t".brightBlue, (answer) => {
        let subfinder_command = `subfinder -d ${answer} -silent -o subdomains.txt`;
        exec(subfinder_command, (stderr, stdout) => {
            console.log(`subdomain list\n`.green, stdout);
            //console.log('subdomains added to subdomains.txt file\n'.green);
            web_asset_discovery();
        });
    });


    //find out web assets from the subdomain list
    async function web_asset_discovery() {

        let httpx_command = `httpx -l subdomains.txt -sc -silent -nc`;
        const assets = await execSync(httpx_command);
        const outputString = assets.toString().trim().split("\n");
        console.log(`web assets list\n`.green, outputString);
        processWeb_assets(outputString);

    }

    //processing web assets and storing in database
    async function processWeb_assets(outputString) {

        try {
            for (const line of outputString) {
                const [domainName, statusCode] = line.split(' ');
                await db.collection('web_assets').insertOne({
                    domainName,
                    statusCode
                });
            }
            console.log('\nWeb assets stored in Database successfully\n');

            

        } catch (error) {
            console.error(`Error storing web assets in MongoDB: ${error}`);
        } finally {
            nuclei_scanner();
        }

    }

    //running nuclei scanner
    async function nuclei_scanner() {
    try {
        const result = await db.collection('web_assets').findOne({
            scan: null
        });

        console.log(`picked up the domain\n${result.domainName}\n`.green);

        let nuclei_command = `nuclei -u ${result.domainName} -silent --no-color`;
        const outputBuffer = await execSync(nuclei_command, {
            maxBuffer: 1024 * 1024
        });

        console.log(`vulnerability details for ${result.domainName}\n\n${outputBuffer.toString().trim()}\n`.red);

        const vulnerability_details = outputBuffer.toString().trim().split('\n');

        processDetails(vulnerability_details, result);


    } catch (error) {
        console.error('Error querying web_assets collection:', error);
    }
}


//processing nuclei results and storing into database
async function processDetails(vulnerability_details, result) {
    
    const regex = /\[([^\]]+)\] \[([^\]]+)\] \[([^\]]+)\] (.+)/;


    try {
        
        for (const line of vulnerability_details) {

            const match = regex.exec(line);

            //console.log(`match results\n`.green,match);


            if (match) {

                await db.collection('vulnerability_details').insertOne({
                  domain: result.domainName,
                    category: match[1],
                    protocol: match[2],
                    severity: match[3],
                    details: match[4]
                });

                await db.collection('web_assets').updateOne({
                    _id: result._id
                }, {
                    $set: {
                        scan: 1
                    }
                });

                

            } else {
                console.log("No match found");
            }

        }
        
        console.log(`domain ${result.domainName} is completed and taking another domain\n`);

        

    } catch (error) {
        console.error(`Error storing nuclei reusults in MongoDB: ${error}`);
    } finally {
        nuclei_scanner();
    }

}


}
